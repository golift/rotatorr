// Code generated by MockGen. DO NOT EDIT.
// Source: golift.io/rotatorr (interfaces: Rotatorr)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRotatorr is a mock of Rotatorr interface.
type MockRotatorr struct {
	ctrl     *gomock.Controller
	recorder *MockRotatorrMockRecorder
}

// MockRotatorrMockRecorder is the mock recorder for MockRotatorr.
type MockRotatorrMockRecorder struct {
	mock *MockRotatorr
}

// NewMockRotatorr creates a new mock instance.
func NewMockRotatorr(ctrl *gomock.Controller) *MockRotatorr {
	mock := &MockRotatorr{ctrl: ctrl}
	mock.recorder = &MockRotatorrMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRotatorr) EXPECT() *MockRotatorrMockRecorder {
	return m.recorder
}

// Dirs mocks base method.
func (m *MockRotatorr) Dirs(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dirs", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dirs indicates an expected call of Dirs.
func (mr *MockRotatorrMockRecorder) Dirs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dirs", reflect.TypeOf((*MockRotatorr)(nil).Dirs), arg0)
}

// Post mocks base method.
func (m *MockRotatorr) Post(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Post", arg0, arg1)
}

// Post indicates an expected call of Post.
func (mr *MockRotatorrMockRecorder) Post(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockRotatorr)(nil).Post), arg0, arg1)
}

// Rotate mocks base method.
func (m *MockRotatorr) Rotate(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rotate", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rotate indicates an expected call of Rotate.
func (mr *MockRotatorrMockRecorder) Rotate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rotate", reflect.TypeOf((*MockRotatorr)(nil).Rotate), arg0)
}
